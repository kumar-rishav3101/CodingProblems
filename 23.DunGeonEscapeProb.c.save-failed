/*
Trapped in 2D Dungeon and need to find the quickest way out.
Only movement allowed is the adjacent cells
takes 1 min to move b/w cells
Find minimum time to reach the exit */

/*
Some cells may contains rocks denoted by #
S-Denotes start point
E-Denotes exit
.-Empty space

*/

#include<stdlib.h>
#include<stdio.h>

#define SIZE 20
int n;
int count;

struct queue
{
    int row[SIZE];
    int column[SIZE];
    int l;
    int r;
}q;
void enqueue(int rows,int column)
{
    if(q.l==-1)
    {
        q.l++;
        q.r++;
    }
    q.row[q.r]=rows;
    q.column[q.r]=column;
    q.r++;
}

int dequeuerow()
{
    if(q.l>=q.r)
    {
        return 0;
    }
    int data=q.row[q.l];
    q.l++;
    return data;
}

int dequeuecolumn()
{
    if(q.l>=q.r)
    {
        return 0;
    }
    int data=q.column[q.l];
    q.l++;
    return data;
}


void bfs(int **arr,int startr,int startc,int **visited)
{
    if (visited[startr][startc])
            return;
    visited[startr][startc]=1;
    printf("%d\t%d\n",startr,startc);
    for(int i=-1;i<=1;i+=2)
    {
        count++;
        if(arr[startr+i][startc]=='.')
        {
            if(visited[startr+i][startc]!=1)
                enqueue(startr+i,startc);
        }
        if(arr[startr][startc+i]=='.')
        {
            if(visited[startr][startc+i]!=1)
                enqueue(startr,startc+i);
        }

        if(arr[startr+i][startc]=='E')
        {
            printf("Escaped in %d",count);
            return;
        }
        if(arr[startr][startc+i]=='E')
        {
            printf("Escaped in %d",count);
            return;
        }


    }

     while(1)
    {
        int data=dequeuerow();
        int data2=dequeuecolumn();
        if(data==0)
            break;
        bfs(arr,data,data2,visited);
    }

        printf("No Chance");
            return;

    }

int main()
{
    int rows,column;
    char flush;
    printf("Enter Rows and Column values :");
    scanf("%d%d",&rows,&column);
    char **arr=(char **)malloc(rows*sizeof(char *));
    int **visited=(int **)malloc(rows*sizeof(int *));
    for(int r=0;r<rows;r++)
    {
        arr[r]=(char *)malloc(column*sizeof(char));
    }

    for(int r=0;r<rows;r++)
    {
        visited[r]=(int *)malloc(column*sizeof(int));
    }

    int startr,startc;
    printf("Enter Details Of Dungeon :-\n");
    for(int i=0;i<rows;i++)
    {
        for(int j=0;j<column;j++)
        {
            scanf("%c",&flush);
            arr[i][j]=getchar();
            if(arr[i][j]=='S')
            {
                startr=i;
                startc=j;
            }
        }

    }

    for(int i=0;i<rows;i++)
    {
        for(int j=0;j<column;j++)
        {
            visited[i][j]=0;
        }

    }

    bfs(arr,startr,startc,visited);


}
